#!/usr/bin/env node

'use strict';

var path = require('path');
var fs = require('fs-extra');
var gutil = require('gulp-util');
var program = require('commander');
var inquirer = require('inquirer');
var async = require('async');
var pkg = require('../package');
var solis = require('..');

program.version(pkg.version);

/**
 * Serve project files
 */
program
  .command('serve')
  .description('parse and render project files into browser')
  .option('-q, --quiet', 'do not log task operations')
  .option('-r, --root <directory>', 'root directory of project')
  .action(function(options) {
    solis.serve({
      quiet: !!options.quiet,
      root: options.root || process.cwd(),
    });
  });

/**
 * Compile project files into distribution format
 */
program
  .command('compile')
  .description('compile and minify code for distribution')
  .option('-q, --quiet', 'do not log task operations')
  .option('-r, --root <directory>', 'root directory of project')
  .action(function(options) {
    solis.compile({
      quiet: !!options.quiet,
      root: options.root || process.cwd(),
    });
  });

/**
 * Compile project files into distribution format
 */
program
  .command('deploy')
  .description('deploy files to a gh-pages branch')
  .option('-q, --quiet', 'do not log task operations')
  .option('-r, --root <directory>', 'root directory of project')
  .option('-c, --cname <url>', 'cname url')
  .action(function(options) {
    solis.deploy({
      quiet: !!options.quiet,
      root: options.root || process.cwd(),
      cname: options.cname,
    });
  });

/**
 * Generate code
 */
program
  .command('generate [module]')
  .alias('gen')
  .description('generate template files')
  .option('-q, --quiet', 'do not log task operations')
  .option('-o, --output <directory>', 'directory for output of generated files')
  .option('-t, --templates <directory>', 'directory of template modules')
  .action(function(mod, options) {
    options.module = mod;
    options.templates = (options.templates) ? path.join(process.cwd(), options.templates) : path.join(__dirname, '../templates');

    try {
      fs.statSync(path.join(options.templates, mod));
    } catch (e) {
      gutil.log('Error', gutil.colors.red(mod), 'template does not exist');
      process.exit(1);
    }

    var series = [
      function(cb) {
        var modPath = path.join(options.templates, options.module, 'generate.json');
        try {
          var gen = fs.readJsonSync(modPath);
          inquirer.prompt(gen.questions, function(answers) {
            options.data = answers;
            cb();
          });
        } catch (e) {
          gutil.log('Generator questions not loaded from', gutil.colors.cyan(modPath));
          options.data = {};
          cb();
        }
      },
      function(cb) {
        solis.generate({
          quiet: !!options.quiet,
          dest: options.output || process.cwd(),
          src: path.join(options.templates, options.module),
          module: options.module,
          data: options.data,
        });
        cb();
      },
    ];

    if (!options.module) {
      series.unshift(function(cb) {
        var choices = fs.readdirSync(options.templates);
        inquirer.prompt([{
          type: 'list',
          name: 'module',
          message: 'What do you want to generate:',
          choices: choices,
        }], function(answers) {
          options.module = answers.module;
          cb();
        });
      });
    }

    async.series(series);
  });

program.parse(process.argv);
